<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">
    <spring:beans>
        <spring:import resource="classpath:ms3-api.xml" />
        <spring:import resource="classpath:ms3-implementation.xml" />
        <spring:import resource="classpath:global.xml" />
    </spring:beans>
    <munit:config mock-connectors="false" mock-inbounds="false" doc:name="MUnit configuration"/>
    <http:request-config name="HTTP_Request_Configuration" host="localhost" port="8086"  doc:name="HTTP Request Configuration">
        <http:basic-authentication username="admin" password="admin" preemptive="true"/>
    </http:request-config>
    <http:request-config name="HTTP_Request_Configuration_TestAuth" host="localhost" port="8086" doc:name="HTTP Request Configuration">
        <http:basic-authentication username="admin123" password="admin" preemptive="true"/>
    </http:request-config>
    <munit:test name="put:/contact/contactId:application/json:api-config-200-application/json-FlowTest" description="Verifying functionality of [put:/contact/contactId:application/json:api-config-200-application/json]">
        <mock:when messageProcessor=".*:.*" doc:name="Mock-Sys-Identification-API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Invoke Sys Idetification API']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[1]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock-Sys-Address-API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Invoke Sys Address API']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[1]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock-Sys-Communication-API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Invoke Communication API']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[1]"/>
        </mock:when>
        <set-payload value="#[getResource('scaffolder/request/put_contact_{contactid}_application_json.json').asString()]" doc:name="Set Payload"/>
        <http:request config-ref="HTTP_Request_Configuration" method="PUT" path="/api/ms3/proc/contact/10" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>
                <http:header headerName="Content-Type" value="application/json"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/put_200_contact_{contactid}_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>

    <munit:test name="delete:/contact/contactId:api-config-200-application/json-FlowTest" description="Verifying functionality of [delete:/contact/contactId:api-config-200-application/json]">
        <mock:when messageProcessor=".*:.*" doc:name="Mock-Sys-Identification-API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Invoke Sys Identification API']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[1]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock-Sys-Address-API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Invoke Sys Addess API']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[1]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock-Sys-Comminication-API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Invoke Sys Communication API']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[1]"/>
        </mock:when>
        <http:request config-ref="HTTP_Request_Configuration" method="DELETE" path="/api/ms3/proc/contact/10" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/delete_200_contact_{contactid}_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>

    <munit:test name="get:/contact/contactId:api-config-200-application/json-FlowTest" description="Verifying functionality of [get:/contact/contactId:api-config-200-application/json]">
        <mock:when messageProcessor=".*:.*" doc:name="Mock-Sys-Identification-API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Invoke sys Identification API']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock-Sys-Address-API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Invoke Sys Address API']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock-Sys-Communication-API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Invoke Sys Communication API']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/api/ms3/proc/contact/10" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />

    </munit:test>

    <munit:test name="post:/contact:application/json:api-config-200-application/json-FlowTest" description="Verifying functionality of [post:/contact:application/json:api-config-200-application/json]">
        <mock:when messageProcessor=".*:.*" doc:name="Mock-Sys-Identification-API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Invoke Sys Identification API']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[{&quot;Id&quot; : &quot;123&quot;}]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock-Sys-Address-API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Invoke Sys Address API']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock-Sys-Communication-API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Invoke Sys Communication API']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <set-payload value="#[getResource('scaffolder/request/post_contact_application_json.json').asString()]" doc:name="Set Payload"/>
        <http:request config-ref="HTTP_Request_Configuration" method="POST" path="/api/ms3/proc/contact" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>
                <http:header headerName="Content-Type" value="application/json"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/post_200_contact_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="post:/contact:application/json:api-config-400-application/json-FlowTest" description="Verifying functionality of [post:/contact:application/json:api-config-400-application/json]">
        <set-payload value="#[getResource('scaffolder/request/post_400_contact_application_json.json').asString()]" doc:name="Set Payload"/>
        <http:request config-ref="HTTP_Request_Configuration" method="POST" path="/api/ms3/proc/contact" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>
                <http:header headerName="Content-Type" value="application/json"/>

            </http:request-builder>
            <http:success-status-code-validator values="400" />
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(400))]" doc:name="assert that - http.status eq 400" />

    </munit:test>
    <munit:test name="post:/contact:application/json:api-config-401-application/json-FlowTest" description="Verifying functionality of [post:/contact:application/json:api-config-401-application/json]">
        <set-payload value="#[getResource('scaffolder/request/post_contact_application_json.json').asString()]" doc:name="Set Payload"/>
        <http:request config-ref="HTTP_Request_Configuration_TestAuth" method="POST" path="/api/ms3/proc/contact" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>
                <http:header headerName="Content-Type" value="application/json"/>

            </http:request-builder>
            <http:success-status-code-validator values="401" />
        </http:request>

        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(401))]" doc:name="assert that - http.status eq 401" />

    </munit:test>

</mule>
